*** DONE explore: wasip2 in tinygo
<2025-03-12 Wed>

A simple prototype demonstrating how to compile Go code to WebAssembly using TinyGo with WASI Preview2 support and run it in a browser environment.

Replicating this prototype from scratch:

1. Install the required tools:
   brew install wasm-tools tinygo
   npm install -g @bytecodealliance/jco

2. Create a simple Go program (main.go):
   package main
   
   import "fmt"
   
   func main() {
       fmt.Println("Hello from TinyGo WebAssembly with WASI Preview2!")
   }

3. Compile the Go code to WebAssembly:
   GOOS=wasip2 GOARCH=wasm tinygo build -o main.wasm main.go

4. Test the WASM file with wasmtime (optional):
   wasmtime main.wasm

5. Transpile the WASM module to JavaScript:
   jco transpile main.wasm --out-dir ./wasm/ --instantiation

6. Set up the JavaScript/browser environment:
   - Initialize npm/yarn: npm init -y
   - Add required dependencies: yarn add @bytecodealliance/preview2-shim
   - Add dev dependencies: yarn add -D typescript vite

7. Create a TypeScript file (main.ts) to load the WASM module:
   import { instantiate } from './wasm/main.js';
   import { createStdout, createStderr, createStdin } from '@bytecodealliance/preview2-shim/cli';
   import { stdinDefault } from '@bytecodealliance/preview2-shim/cli/stdin';
   import { stdoutDefault } from '@bytecodealliance/preview2-shim/cli/stdout';
   import { stderrDefault } from '@bytecodealliance/preview2-shim/cli/stderr';
   import { monotonicClockDefault } from '@bytecodealliance/preview2-shim/clocks/monotonic-clock';
   import { wallClockDefault } from '@bytecodealliance/preview2-shim/clocks/wall-clock';
   import { environmentDefault, randomDefault } from '@bytecodealliance/preview2-shim';

   // Create custom stdout for browser display
   const consoleOutput = document.createElement('pre');
   document.body.appendChild(consoleOutput);
   const stdout = createStdout({
     writeString(message) {
       consoleOutput.textContent += message;
       return Promise.resolve();
     }
   });

   async function run() {
     const instance = await instantiate({
       'wasi:cli/stderr': stderrDefault(),
       'wasi:cli/stdin': stdinDefault(),
       'wasi:cli/stdout': stdout,
       'wasi:cli/environment': environmentDefault(),
       'wasi:cli/exit': {},
       'wasi:clocks/monotonic-clock': monotonicClockDefault(),
       'wasi:clocks/wall-clock': wallClockDefault(),
       'wasi:random/random': randomDefault(),
       'wasi:io/error': {},
       'wasi:filesystem/types': {},
       'wasi:filesystem/preopens': {}
     });
     await instance.main();
   }

   run().catch(e => console.error("Error running WASM:", e));

8. Create HTML file (index.html) for browser execution:
   <!DOCTYPE html>
   <html>
   <head>
     <title>TinyGo WASI Preview2 Demo</title>
     <style>
       body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
       pre { background: #f5f5f5; padding: 10px; border-radius: 4px; overflow: auto; }
     </style>
   </head>
   <body>
     <h1>TinyGo WASI Preview2 Demo</h1>
     <p>Check the console for output from the WebAssembly module</p>
     <pre id="output"></pre>
     <script>
       // Capture console output and display it on page
       const originalConsoleLog = console.log;
       console.log = function() {
         const output = document.getElementById('output');
         for (let i = 0; i < arguments.length; i++) {
           const arg = arguments[i];
           if (typeof arg === 'object') {
             output.textContent += JSON.stringify(arg, null, 2) + '\n';
           } else {
             output.textContent += arg + '\n';
           }
         }
         originalConsoleLog.apply(console, arguments);
       };
     </script>
     <script type="module" src="dist/bundle.js"></script>
   </body>
   </html>

9. Build and serve with esbuild:
   # Install esbuild if not already installed
   npm install -g esbuild
   
   # Bundle and serve
   esbuild main.ts \
     --bundle \
     --outfile=dist/bundle.js \
     --format=esm \
     --platform=browser \
     --sourcemap \
     --loader:.wasm=file \
     --loader:.core.wasm=file \
     --loader:.core2.wasm=file \
     --loader:.core3.wasm=file \
     --loader:.core4.wasm=file \
     --asset-names=[name]-[hash] \
     --public-path=/dist \
     --serve=:8000 \
     --servedir=. \
     --define:process.versions='{}'

This prototype demonstrates bridging Go and WebAssembly with WASI Preview2, allowing Go code to run in browser environments with access to system interfaces like stdout through the WebAssembly System Interface standard.
