{
  cli: {
    _appendEnv: [Getter],
    _setArgs: [Getter],
    _setCwd: [Getter],
    _setEnv: [Getter],
    _setStderr: [Getter],
    _setStdin: [Getter],
    _setStdout: [Getter],
    _setTerminalStderr: [Getter],
    _setTerminalStdin: [Getter],
    _setTerminalStdout: [Getter],
    environment: [Getter],
    exit: [Getter],
    stderr: [Getter],
    stdin: [Getter],
    stdout: [Getter],
    terminalInput: [Getter],
    terminalOutput: [Getter],
    terminalStderr: [Getter],
    terminalStdin: [Getter],
    terminalStdout: [Getter]
  },
  clocks: { monotonicClock: [Getter], wallClock: [Getter] },
  filesystem: {
    _addPreopen: [Getter],
    _setPreopens: [Getter],
    preopens: [Getter],
    types: [Getter]
  },
  http: {
    HTTPServer: [Getter],
    _forbiddenHeaders: [Getter],
    outgoingHandler: [Getter],
    types: [Getter]
  },
  io: { error: [Getter], poll: [Getter], streams: [Getter] },
  random: { insecure: [Getter], insecureSeed: [Getter], random: [Getter] },
  sockets: {
    _denyDnsLookup: [Getter],
    _denyTcp: [Getter],
    _denyUdp: [Getter],
    instanceNetwork: [Getter],
    ipNameLookup: [Getter],
    network: [Getter],
    tcp: [Getter],
    tcpCreateSocket: [Getter],
    udp: [Getter],
    udpCreateSocket: [Getter]
  },
  'wasi:cli/environment': {
    getEnvironment: [Function: getEnvironment],
    getArguments: [Function: getArguments],
    initialCwd: [Function: initialCwd]
  }
}
